/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.atividade06.view;

import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/**
 *
 * @author ADMIN
 */
public class FrmVetores extends javax.swing.JFrame {
    //Declaro o vetor sem inicializar
    int vet[];
    //Para definir o tamanho do vetor
    int tamanhoVet;
    
    /**
     * Creates new form FrmVetores
     */
    public FrmVetores() {
        initComponents();
        //pego o valor setado no spinner 
        tamanhoVet = (int) spnTamVetor.getValue();
        //inicializo o vetor com o tamanho indicado
        vet = new int[tamanhoVet];
        //Criação de um MOdel para inicializar a lista
        DefaultListModel listaInicial = new DefaultListModel();
        //Inicio a lista com a numeração das posições e tudo zerado
        for(int i=0; i<vet.length; i++){
            listaInicial.addElement("["+i+"] -> "+vet[i]);
        }
        //Indico qual lista inicialmente usar esse modelo
        ltsVetor.setModel(listaInicial);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblVetor = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ltsVetor = new javax.swing.JList<>();
        btnAdicionar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnOrdenar = new javax.swing.JButton();
        spnNumero = new javax.swing.JSpinner();
        spnTamVetor = new javax.swing.JSpinner();
        bntOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblVetor.setText("Tamanho do Vetor:");

        ltsVetor.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ltsVetor);

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnOrdenar.setText("Ordenar");
        btnOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarActionPerformed(evt);
            }
        });

        spnTamVetor.setModel(new javax.swing.SpinnerNumberModel(10, 1, null, 1));

        bntOk.setText("OK");
        bntOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblVetor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnTamVetor, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spnNumero)
                        .addGap(33, 33, 33)
                        .addComponent(btnAdicionar)))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(bntOk, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnTamVetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVetor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bntOk)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdicionar)
                            .addComponent(spnNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOrdenar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        //Pego a posição clicada
        int posicao = ltsVetor.getSelectedIndex();
        //Uma condição para o caso do usuário acionar o botão sem clicar numa posição da lista
        if(posicao>=0){
            //Zero o vetor na posição indicada, removendo o que havia ali
            vet[posicao] = 0;
            //Criação de um Model para guardar a lista de itens que serão exibidos na lisa
            DefaultListModel lista = new DefaultListModel();
            //Com o for eu atualizo o vetor agora com a posição zerada
            for(int i=0; i<vet.length; i++){
                lista.addElement("["+i+"] -> "+vet[i]);
            }
            //Indico para a lista qual conjunto de elementos ela irá utilizar
            ltsVetor.setModel(lista);
        }else{
            //Mostra uma pequena janela no centro da tela do sistema
            JOptionPane.showMessageDialog(this, "Selecione um item da lista para remover", "Informação", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        //Captura o valor da posição que for clicada na lista
        int posicao = ltsVetor.getSelectedIndex();
        //Uma condição para o caso do usuário acionar o botão sem clicar numa posição da lista
        if(posicao>=0){
            //Captura o valor do spinner. Como temos certeza que será um inteiro a conversão pode ser direta
            int valor = (int) spnNumero.getValue();
            //Criação de um Model para guardar a lista de itens que serão exibidos na lisa
            DefaultListModel lista = new DefaultListModel();
            //Na posição clicada é inserido o valor do spinner
            vet[posicao] = valor;
            //Atualizo o vetor adicionando o novo valor, as demais posições do vetor já estão preenchidas com 0 no momento da sua criação
            for(int i=0; i<vet.length; i++){
                lista.addElement("["+i+"] -> "+vet[i]);
            }
            //Indico para a lista qual conjunto de elementos ela irá utilizar
            ltsVetor.setModel(lista);
        }else{
            //Mostra uma pequena janela no centro da tela do sistema
            JOptionPane.showMessageDialog(this, "Selecione uma posição na lista para adicionar", "Informação", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarActionPerformed
        // TODO add your handling code here:
        //Uma string com as opções que vou usar no JOptionPane
        String[] opcoes = {"Crescente","Decrecente"};
        /*
        JOptionPane.showOptionDialog(rootPane, evt, title, WIDTH, HEIGHT, icon, options, EXIT_ON_CLOSE)
        JOptionPane.showOptionDialog(
                                    rootPane, -> Janela Pai (qual janela uso como referencia para ele aparecer)
                                    evt, -> Mensagem que aparece na caixa
                                    title, -> Titulo da Janela
                                    WIDTH, -> tipo de opções (para opções personalizadas DEFAULT_OPTION)
                                    HEIGHT, -> icone padrão
                                    icon,  -> icone personalizado (se uso o icone padrão esse coloco como null e vice versa)
                                    options, -> Vetor com as opções personalizadas
                                    EXIT_ON_CLOSE) -> Opção padrão selecionada
        */
        int ordenacao = JOptionPane.showOptionDialog(this, "Escolha a ordenação desejada", "Ordenação", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcoes, opcoes[0]);
        //Coloco o vetor "vet" em ordem crescente
        Arrays.sort(vet);
        //Criação de um Model para guardar a lista de itens que serão exibidos na lisa
        DefaultListModel lista = new DefaultListModel();
        //De acordo com o que for selecionado no JOption defino o que realizar
                   
        if(ordenacao == 1){
            //Vou caminhar no vetor somente até sua metade , pois vou invertendo o primeiro com o ultimo elemento até chegar no meio
            for(int i=0; i<vet.length/2; i++){
                int temp = vet[i]; //guardo o primeiro elemento de forma temporária
                vet[i] = vet[vet.length - 1 - i]; //na primeira posição troco com o ultimo
                vet[vet.length - 1 - i] = temp; //agora na ultima posição coloco o elemento que estava em primeiro e guardei na variavel temporaria
            }
        }
        //Agora atualizo a estrutura para ser exibida na lista com o vetor em ordem
        for(int i=0; i<vet.length; i++){
            lista.addElement("["+i+"] -> "+vet[i]);
        }
        //Indico para a lista qual conjunto de elementos ela irá utilizar
        ltsVetor.setModel(lista);

    }//GEN-LAST:event_btnOrdenarActionPerformed

    private void bntOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntOkActionPerformed
        // TODO add your handling code here:
        //Uso uma janela para o usuário confirmar sua ação
        int confirmação = JOptionPane.showConfirmDialog(this, "Deseja altera o tamanho do vetor? Todos valores da lista serão perdidos", "Confirmação", JOptionPane.YES_NO_OPTION);
        
        //Uma condicional para de acordo com a confirmação do usuário, altero ou não o tamanho do vetor
        if(confirmação == JOptionPane.YES_OPTION){
            //pego o valor setado no spinner 
            tamanhoVet = (int) spnTamVetor.getValue();
            //Atualiza o tamanho do vetor
            vet = new int[tamanhoVet];
            //Criação de um MOdel para redimensionar a lista
            DefaultListModel listaAtualizada = new DefaultListModel();
            //Inicio a lista com a numeração das posições e tudo zerado
            for(int i=0; i<vet.length; i++){
                listaAtualizada.addElement("["+i+"] -> "+vet[i]);
            }
            //Atualizo a lista para usar esse modelo
            ltsVetor.setModel(listaAtualizada);
        }
        
        
    }//GEN-LAST:event_bntOkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmVetores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmVetores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmVetores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmVetores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmVetores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntOk;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnOrdenar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblVetor;
    private javax.swing.JList<String> ltsVetor;
    private javax.swing.JSpinner spnNumero;
    private javax.swing.JSpinner spnTamVetor;
    // End of variables declaration//GEN-END:variables
}
